diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..46935f9
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,7 @@
+{
+    "files.associations": {
+        "types.h": "c",
+        "fcntl.h": "c",
+        "syscall.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index f8c820e..27eadb4 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_history\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..afe2c23 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -3,9 +3,35 @@
 #include "memlayout.h"
 #include "riscv.h"
 #include "defs.h"
+#include "syscall_stat.h"
 
 volatile static int started = 0;
 
+struct syscall_stat syscall_array[sys_call_number] = {
+  {"fork",0,0},
+  {"exit",0,0},
+  {"wait",0,0},
+  {"pipe",0,0},
+  {"read",0,0},
+  {"kill",0,0},
+  {"exec",0,0},
+  {"fstat",0,0},
+  {"chdir",0,0},
+  {"dup",0,0},
+  {"getpid",0,0},
+  {"sbrk",0,0},
+  {"sleep",0,0},
+  {"uptime",0,0},
+  {"open",0,0},
+  {"write",0,0},
+  {"mknod",0,0},
+  {"unlink",0,0},
+  {"link",0,0},
+  {"mkdir",0,0},
+  {"close",0,0},
+  {"history",0,0},
+};
+
 // start() jumps here in supervisor mode on all CPUs.
 void
 main()
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..eb5a4f2 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -6,6 +6,7 @@
 #include "proc.h"
 #include "syscall.h"
 #include "defs.h"
+#include "syscall_stat.h"
 
 // Fetch the uint64 at addr from the current process.
 int
@@ -101,6 +102,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_history(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,7 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_history] sys_history,
 };
 
 void
@@ -134,11 +137,25 @@ syscall(void)
   int num;
   struct proc *p = myproc();
 
+  int start_time,end_time;
+
   num = p->trapframe->a7;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
+    acquire(&tickslock);
+    start_time = ticks;
+    release(&tickslock);
+
     p->trapframe->a0 = syscalls[num]();
+
+    acquire(&tickslock);
+    end_time = ticks;
+    release(&tickslock);
+
+    syscall_array[num-1].count++;
+    syscall_array[num-1].accum_time+=(end_time-start_time);
+    
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..df8836e 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_history 22
diff --git a/kernel/syscall_stat.h b/kernel/syscall_stat.h
new file mode 100644
index 0000000..1a80f3c
--- /dev/null
+++ b/kernel/syscall_stat.h
@@ -0,0 +1,11 @@
+
+struct syscall_stat
+{
+    char syscall_name [16];
+    int count ;
+    int accum_time ;
+};
+
+#define sys_call_number 22
+
+extern struct syscall_stat syscall_array[sys_call_number];
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..3221053 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "syscall_stat.h"
 
 uint64
 sys_exit(void)
@@ -12,7 +13,7 @@ sys_exit(void)
   int n;
   argint(0, &n);
   exit(n);
-  return 0;  // not reached
+  return 0; // not reached
 }
 
 uint64
@@ -43,7 +44,7 @@ sys_sbrk(void)
 
   argint(0, &n);
   addr = myproc()->sz;
-  if(growproc(n) < 0)
+  if (growproc(n) < 0)
     return -1;
   return addr;
 }
@@ -55,12 +56,14 @@ sys_sleep(void)
   uint ticks0;
 
   argint(0, &n);
-  if(n < 0)
+  if (n < 0)
     n = 0;
   acquire(&tickslock);
   ticks0 = ticks;
-  while(ticks - ticks0 < n){
-    if(killed(myproc())){
+  while (ticks - ticks0 < n)
+  {
+    if (killed(myproc()))
+    {
       release(&tickslock);
       return -1;
     }
@@ -91,3 +94,26 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_history()
+{
+  uint64 addr;
+  argaddr(1, &addr);
+  uint64 sys_call_index;
+  argaddr(0, &sys_call_index);
+  // struct syscall_stat curr_sycall;
+  // copyin(myproc()->pagetable, (char *)&sys_call_index, addr2, sizeof(int));
+  // printf("hello\n");
+  // printf("%lu\n",sys_call_index);
+  // for(int i = 0 ;i<5;i++){
+  //   printf("before change system call %d\n",curr_sycall[i]);
+  // }
+  // user_value[0] = 10;
+  // strncpy(curr_sycall.syscall_name,"fork",4);
+  // curr_sycall.count++;
+  // curr_sycall.accum_time += 2;
+  copyout(myproc()->pagetable, addr, (char *)&syscall_array[sys_call_index-1], sizeof(syscall_array[sys_call_index-1]));
+  // printf("after change system call %d\n",user_value);
+  return 123;
+}
\ No newline at end of file
diff --git a/user/history.c b/user/history.c
new file mode 100644
index 0000000..3bb45a0
--- /dev/null
+++ b/user/history.c
@@ -0,0 +1,32 @@
+#include "kernel/types.h"
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+int main(int argc, char* argv[])
+{
+    // struct syscall_stat new_struct;
+    struct syscall_stat sys_call;
+    // printf("printing history...\n");
+    if(argc<2){
+        for(int i=0;i<sys_call_number;i++){
+            history(i+1,&sys_call);
+            printf("%d: syscall: %s, #: %d, time: %d\n",i+1,sys_call.syscall_name,sys_call.count,sys_call.accum_time);
+        }
+    }
+    else{
+        history(atoi(argv[1]),&sys_call);
+        printf("%d: syscall: %s, #: %d, time: %d\n",atoi(argv[1]),sys_call.syscall_name,sys_call.count,sys_call.accum_time);
+    }
+    // history(16,&sys_call);
+    // printf("Returned from system call %d\n",b);
+    // printf("After system call %d\n",a);
+    // for(int i = 0 ;i<5;i++){
+    //     printf("After system call %d\n",a[i]);
+    // }
+    //printf("%c\n",new_struct.syscall_name);
+    // printf("%s\n",sys_call.syscall_name);
+    // printf("%d\n",sys_call.count);
+    // printf("%d\n",sys_call.accum_time);
+
+    return 0;
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index f16fe27..cc09a34 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,3 +1,4 @@
+#include "kernel/syscall_stat.h"
 struct stat;
 
 // system calls
@@ -22,6 +23,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int history(int,struct syscall_stat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
@@ -41,3 +43,5 @@ void *memcpy(void *, const void *, uint);
 // umalloc.c
 void* malloc(uint);
 void free(void*);
+
+
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..9d54e5b 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("history");
